var f=(o=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(o,{get:(n,e)=>(typeof require<"u"?require:n)[e]}):o)(function(o){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+o+'" is not supported')});import{Collection as R,Events as P}from"discord.js";import O from"path";import v from"fs";import j from"path";import D from"fs";var S={red:"\x1B[31m%s\x1B[0m",yellow:"\x1B[33m%s\x1B[0m",green:"\x1B[32m%s\x1B[0m",blue:"\x1B[34m%s\x1B[0m",orange:"\x1B[38;5;208m%s\x1B[0m"};function r(o,n){console.log(n?S[n]:S.yellow,`[DISCORDJS MODULES] --> ${o}`)}async function C(o,n){let e=new Map;for(let m of o)if(m.isDirectory()){let t=j.join(m.path,`${m.name}/${n}`);if(D.existsSync(t)){let a=D.readdirSync(t,{withFileTypes:!0});if(a?.length){for(let d of a)if(d.name.endsWith(".ts")||d.name.endsWith(".js")){let i=`${t}/${d.name}`,l=await f(i);if(e.has(l.customId))throw new Error(`CustomId: ${l.customId} is duplicated! Path: ${i}`);e.set(l.customId,l)}}}}return e.size&&r(`Loaded ${e.size} ${n} files from ${o.length} modules.`,"blue"),e}import B from"path";import h from"fs";async function x(o,n){let e=new Map,m=B.join(n,"events");if(h.existsSync(m)){let s=h.readdirSync(m,{withFileTypes:!0});if(s?.length){for(let a of s)if(a.name.endsWith(".ts")||a.name.endsWith(".js")){let d=`${m}/${a.name}`,i=await f(d),l=e.get("global")??[];e.set("global",[...l,i])}}}for(let s of o)if(s.isDirectory()){let a=B.join(s.path,`${s.name}/events`);if(h.existsSync(a)){let i=h.readdirSync(a,{withFileTypes:!0});if(i?.length){for(let l of i)if(l.name.endsWith(".ts")||l.name.endsWith(".js")){let M=`${a}/${l.name}`,p=await f(M),A=e.get(s.name)??[];e.set(s.name,[...A,p])}}}}return e.size&&r(`Loaded ${e.size} events files.`,"blue"),e}import T from"path";import g from"fs";async function y(o,n){let e=new Map,m=T.join(n,"commands");if(g.existsSync(m)){let s=g.readdirSync(m,{withFileTypes:!0});if(s?.length){for(let a of s)if(a.name.endsWith(".ts")||a.name.endsWith(".js")){let d=`${m}/${a.name}`,i=await f(d);if(e.has(i.data.name))throw new Error(`Duplicated command: ${i.data.name}; in ${d}`);e.set(i.data.name,i)}}}for(let s of o)if(s.isDirectory()){let a=T.join(s.path,`${s.name}/commands`);if(g.existsSync(a)){let i=g.readdirSync(a,{withFileTypes:!0});if(i?.length){for(let l of i)if(l.name.endsWith(".ts")||l.name.endsWith(".js")){let M=`${a}/${l.name}`,p=await f(M);if(e.has(p.data.name))throw new Error(`Duplicated command: ${p.data.name}; in ${M}`);e.set(p.data.name,p)}}}}return e.size&&r(`Loaded ${e.size} commands files.`,"blue"),e}async function E(o){let n=o?.srcDir?o.srcDir:process.cwd(),e=O.join(n,"/modules");v.existsSync(e)||(r(`Modules directory not found. Creating in ${e}....`,"orange"),v.mkdirSync(e));let t=v.readdirSync(e,{withFileTypes:!0});r("Loading modules files...");let s=await C(t,"buttons"),a=await C(t,"menus"),d=await C(t,"modals"),i=await x(t,n);return{commands:await y(t,n),events:i,buttons:s,menus:a,modals:d}}import{Collection as k}from"discord.js";function w(o,n){if(n.isChatInputCommand()||n.isContextMenuCommand()){let e=o.commands.get(n.commandName);if(!e){r(`No command matching ${n.commandName} was found.`,"red");return}let{cooldowns:m}=o;m.has(e.data.name)||m.set(e.data.name,new k);let t=Date.now(),s=m.get(e.data.name),d=(e.cooldown??5)*1e3;if(s&&s.has(n.user.id)){let i=s.get(n.user.id)+d;if(t<i){let l=Math.round(i/1e3);return n.reply({content:`The next use of this command will be possible <t:${l}:R>.`,ephemeral:!0})}}s?.set(n.user.id,t),setTimeout(()=>s?.delete(n.user.id),d);try{e.execute(n)}catch(i){console.error(i),n.reply({content:"An error occurred while executing this command!",ephemeral:!0})}}else if(n.isAutocomplete()){let e=o.commands.get(n.commandName);if(!e){r(`No command matching ${n.commandName} was found.`,"red");return}try{e.autocomplete&&e.autocomplete(n)}catch(m){console.error(m)}}}import{REST as N,Routes as W}from"discord.js";async function I(o,n,e){let m=new N({version:"10"}).setToken(n),t=[...e.values()].map(s=>s.data.toJSON());await(async()=>{try{o.user&&(r(`Started refreshing ${t.length} application slash commands...`,"blue"),await m.put(W.applicationCommands(o.user.id),{body:t}),r(`Successfully reloaded ${t.length} application slash commands.`,"blue"))}catch(s){console.error(s)}})()}import{Events as z}from"discord.js";async function b(o,n){r("Creating client events...");let e=[];for(let[m,t]of n)r(`Loaded ${t.length} ${m} events.`,"blue"),e.push(...t);for(let m of Object.values(z)){let t=e.filter(s=>s.name==m);if(t.length){let s=m;r(`Found ${t.length} functions of ${s} event.`,"blue"),t.some(a=>a.once)&&o.once(s,(...a)=>{for(let d of t)d.once&&d.execute(...a)}),t.some(a=>!a.once)&&o.on(s,(...a)=>{for(let d of t)d.once||d.execute(...a)})}}}function $(o,n){if(o.isButton()){let e=process.hrtime(),m=n.buttons.get(o.customId);m?m.execute(o):r(`Button module not found, customId: ${o.customId}.`,"red");let t=process.hrtime(e);r(`Button '${o.customId}' execution time: ${(t[0]*1e9+t[1])/1e6} ms`,"orange")}if(o.isAnySelectMenu()){let e=process.hrtime(),m=n.menus.get(o.customId);m?m.execute(o):r(`Menu module not found, customId: ${o.customId}.`,"red");let t=process.hrtime(e);r(`Menu '${o.customId}' execution time: ${(t[0]*1e9+t[1])/1e6} ms`,"orange")}if(o.isModalSubmit()){let e=process.hrtime(),m=n.modals.get(o.customId);m?m.execute(o):r(`Modal module not found, customId: ${o.customId}.`,"red");let t=process.hrtime(e);r(`Modal '${o.customId}' execution time: ${(t[0]*1e9+t[1])/1e6} ms`,"orange")}}var Ge={async init(o,n,e){let m=o;r("Initialization...","green");let t=await E(e);m.commands=t.commands,m.cooldowns=new R,o.on(P.InteractionCreate,async s=>{try{w(m,s),$(s,t)}catch(a){console.log(a)}}),await b(o,t.events),o.once(P.ClientReady,s=>{r("Synchronizing slash commands on the server..."),I(s,n,t.commands).then(()=>r("EVERYTHING DONE AND READY TO WORK!","green")).catch(a=>console.log(a))})}};export{Ge as DiscordJSModules};
